class HostSelect extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
        this.selectedUsers = [];
        this.users = [];
    }

    connectedCallback() {
        this.shadowRoot.innerHTML = `
            <style>
                .dropdown {
                    position: relative;
                    border: 1px solid #ccc;
                    padding: 5px;
                    border-radius: 4px;
                    cursor: text;
                    background-color: #fff;
                    width: 50%;
                }

                .dropdown input {
                    border: none;
                    outline: none;
                    margin: 0;
                    padding: 0;
                    flex-grow: 1;
                    width: 100%;
                }

                .dropdown ul {
                    position: absolute;
                    list-style-type: none;
                    padding: 0;
                    margin: 0;
                    border: 1px solid #ccc;
                    border-top: none;
                    width: calc(100% - 10px);
                    box-sizing: border-box;
                    background: #000;
                    z-index: 1000; /* Make sure it's on top of other elements */
                }

                .dropdown ul li {
                    padding: 10px;
                    cursor: pointer;
                }

                .dropdown ul li:hover {
                    background-color: #2f2f2f;
                }

                .pill {
                    display: inline-flex;
                    align-items: center;
                    padding: 5px 10px;
                    margin-right: 5px;
                    background-color: #111;
                    border-radius: 15px;
                }

                .pill span {
                    margin-right: 10px;
                }

                .pill .remove {
                    cursor: pointer;
                    color: #999;
                    font-weight: bold;
                }

                .pill .remove:hover {
                    color: #333;
                }

                .hidden {
                    display: none;
                }

                .selected-user {
                    background-color: #ddd; /* Light grey background for selected users */
                    color: #666; /* Dark grey text color for selected users */
                    pointer-events: click; /* Prevent clicking on selected users */
                }
            </style>
            <div class="dropdown" id="dropdown">
                <!-- Pills will be inserted here -->
                <input type="text" id="searchInput" placeholder="Search...">
                <ul id="dropdownList" class="hidden">
                    <!-- Dropdown options will be generated by JavaScript -->
                </ul>
            </div>
        `;

        this.dropdown = this.shadowRoot.querySelector('.dropdown');
        this.searchInput = this.shadowRoot.querySelector('#searchInput');
        this.dropdownList = this.shadowRoot.querySelector('#dropdownList');

        this.searchInput.addEventListener('focus', () => {
            this.getHosts(this.searchInput.value);
            this.dropdownList.classList.remove('hidden'); // Show on focus
        });

        this.searchInput.addEventListener('input', (e) => {
            this.getHosts(e.target.value);
        });

        document.addEventListener('click', (e) => {
            if (!this.shadowRoot.contains(e.target)) {
                this.dropdownList.classList.add('hidden');
            }
        });

        this.dropdown.addEventListener('click', (e) => {
            e.stopPropagation();
        });

        this.getHosts(null, true);

        // Initial population of the dropdown
        //this.updateDropdown('');
    }

    getHosts(filter, dontUpdateDromDown) {
        fetch(`/hosts/10${(filter) ? `/${encodeURIComponent(filter)}` : ''}`, {
            method: 'GET',
            headers: {
                'Authorization': localStorage.getItem('token')
            }
        })
            .then(response => response.json())
            .then(data => {
                this.users = data;
                if (!dontUpdateDromDown) {
                    this.updateDropdown(filter);
                }
            })
            .catch(error => { console.log(error); });
    }

    focusInput() {
        this.searchInput.focus();
    }

    updateDropdown(filter) {
        this.dropdownList.innerHTML = '';

        this.users.forEach(user => {
            const li = document.createElement('li');
            li.textContent = `${user.name}`;

            // Check if the user is already selected
            const isUserSelected = this.selectedUsers.some(selectedUser => selectedUser.id === user.id);

            if (isUserSelected) {
                li.classList.add('selected-user');
                li.addEventListener('click', (event) => {
                    this.removeUser(user.id);
                    event.stopPropagation();
                });
            } else {
                // Attach click event if user is not already selected
                li.addEventListener('click', (event) => {
                    this.selectUser(user);
                    event.stopPropagation();
                });
            }

            this.dropdownList.appendChild(li);

        });

        // Toggle visibility based on the presence of the filter text and focus state
        console.log(this.users.length === 0);
        this.dropdownList.classList.toggle('hidden', this.users.length === 0);

    }

    hasFocus(element) {
        return document.activeElement === element;
    }

    selectUser(user) {
        if (!this.selectedUsers.some(u => u.id === user.id)) {
            this.selectedUsers.push(user);
            this.updateSelectedPills();
            this.searchInput.value = '';
            this.updateDropdown('');
        }
    }


    updateSelectedPills() {
        // Clear current pills
        this.dropdown.querySelectorAll('.pill').forEach(pill => pill.remove());

        // Add new ones
        this.selectedUsers.forEach(user => {
            const pill = this.createPill(user);
            this.dropdown.insertBefore(pill, this.searchInput);
        });
    }

    createPill(user) {
        const pill = document.createElement('div');
        pill.className = 'pill';
        pill.dataset.userId = user.id; // Store the user ID in a data attribute
        pill.innerHTML = `
            <span>${user.name}</span>
            <span class="remove" data-user-id="${user.id}">&times;</span>
        `;
        
        const removeBtn = pill.querySelector('.remove');
        removeBtn.addEventListener('click', () => this.removeUser(user.id));
        return pill;
    }

    removeUser(userId) {
        this.selectedUsers = this.selectedUsers.filter(user => user.id !== userId);
        this.updateSelectedPills();
        this.updateDropdown(this.searchInput.value); // Refresh the dropdown to make the user clickable again
    }
}

customElements.define('host-select', HostSelect);
